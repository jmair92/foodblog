type: edu
custom_name: Too many ingredients!
files:
- name: blog.py
  visible: true
  text: |
    import sqlite3


    class FoodBlog:
        data = {"meals": ("breakfast", "brunch", "lunch", "supper"),
                "ingredients": ("milk", "cacao", "strawberry", "blueberry", "blackberry", "sugar"),
                "measures": ("ml", "g", "l", "cup", "tbsp", "tsp", "dsp", "")}

        def __init__(self, name):
            self.conn = sqlite3.connect(name)
            self.conn.execute("PRAGMA foreign_keys = 1")
            self.c = self.conn.cursor()

        def create_tables(self):
            self.c.execute('''CREATE TABLE ingredients
                    ([ingredient_id] INTEGER PRIMARY KEY, [ingredient_name] VARCHAR(50) UNIQUE NOT NULL)''')
            self.c.execute('''CREATE TABLE measures
                    ([measure_id] INTEGER PRIMARY KEY, measure_name TEXT UNIQUE)''')
            self.c.execute('''CREATE TABLE serve
                    (serve_id INTEGER PRIMARY KEY, recipe_id INTEGER NOT NULL, meal_id INTEGER NOT NULL,
                    FOREIGN KEY (recipe_id) REFERENCES recipes (recipe_id),
                    FOREIGN KEY (meal_id) REFERENCES meals (meal_id))''')
            self.c.execute('''CREATE TABLE meals
                    (meal_id INTEGER PRIMARY KEY, meal_name TEXT UNIQUE NOT NULL)''')
            self.c.execute('''CREATE TABLE recipes
                    (recipe_id INTEGER PRIMARY KEY, recipe_name TEXT NOT NULL, recipe_description TEXT)''')
            self.c.execute('''CREATE TABLE quantity
                    (quantity_id INTEGER PRIMARY KEY, measure_id INTEGER NOT NULL, ingredient_id INTEGER NOT NULL,
                    quantity INTEGER NOT NULL, recipe_id INTEGER NOT NULL,
                    FOREIGN KEY (measure_id) REFERENCES measures (measure_id),
                    FOREIGN KEY (ingredient_id) REFERENCES ingredients (ingredient_id),
                    FOREIGN KEY (recipe_id) REFERENCES recipes (recipe_id))''')
            self.conn.commit()

        def insert_ingredients(self):
            for value in self.data['ingredients']:
                self.c.execute("INSERT INTO ingredients (ingredient_name) VALUES (?);", (value,))
                self.conn.commit()

        def insert_measures(self):
            for value in self.data['measures']:
                self.c.execute("INSERT INTO measures (measure_name) VALUES (?);", (value,))
                self.conn.commit()

        def insert_meals(self):
            for value in self.data['meals']:
                self.c.execute("INSERT INTO meals (meal_name) VALUES (?);", (value,))
                self.conn.commit()

        def insert_recipe(self, name, desc):

            self.c.execute("INSERT INTO recipes (recipe_name, recipe_description) VALUES(?,?);", (name, desc,))
            self.conn.commit()

        def query_meals(self):
            meals = self.c.execute("SELECT meal_id, meal_name FROM meals")
            self.conn.commit()
            return meals

        def insert_serve(self, name, desc, serving):
            meals = []
            for s in serving:
                result = self.c.execute("SELECT meal_id FROM meals WHERE meal_id = (?)", (s,))
                meals.append(result.fetchone())
            recipes = self.c.execute("SELECT recipe_name FROM recipes WHERE recipe_name = (?)", (name,))
            recipes.fetchone()
            if recipes is None:
                self.insert_recipe(name, desc)
                self.conn.commit()
            recipe_id = self.c.execute("SELECT * FROM recipes").lastrowid
            for m in meals:
                self.c.execute("INSERT INTO serve (meal_id, recipe_id) VALUES(?, ?);", (m[0], recipe_id))
            self.conn.commit()

        def insert_quantity(self, quantity, name, desc):
            recipes = self.c.execute("SELECT recipe_name FROM recipes WHERE recipe_name = (?)", (name,))
            recipes.fetchone()
            if recipes is None:
                self.insert_recipe(name, desc)
                self.conn.commit()
            recipe_id = self.c.execute("SELECT * FROM recipes").lastrowid
            measure_id = self.c.execute("SELECT * FROM measures WHERE measure_name = (?)", (quantity[1],)).lastrowid
            ingredient_id = self.c.execute("SELECT * FROM ingredients WHERE ingredient_name = (?)", (quantity[2],)).lastrowid
            self.c.execute("INSERT INTO quantity (measure_id, ingredient_id, quantity, recipe_id) VALUES (?, ?, ? ,?);",
                           (measure_id, ingredient_id, quantity[0], recipe_id))
            self.conn.commit()


    def main():
        name = "food_blog.db"
        food_blog = FoodBlog(name)
        food_blog.create_tables()
        food_blog.insert_ingredients()
        food_blog.insert_meals()
        food_blog.insert_measures()
        print("Pass the empty recipe name to exit.")
        while True:
            print(food_blog.query_meals())
            recipe_name = input("Recipe name:")
            if recipe_name == "":
                break
            else:
                recipe_desc = input("Recipe description:")
                food_blog.insert_recipe(recipe_name, recipe_desc)
                print("1) breakfast  2) brunch  3) lunch  4) supper ")
                serve = [int(i) for i in list(input("When the dish can be served: ").split(" "))]
                food_blog.insert_serve(recipe_name, recipe_desc, serve)
                while True:
                    quantity = input("Input quantity of ingredient <press enter to stop").split()
                    if quantity == "":
                        break
                    else:
                        food_blog.insert_quantity(quantity, recipe_name, recipe_desc)

        food_blog.conn.close()


    if __name__ == '__main__':
        main()
  learner_created: false
- name: tests.py
  visible: false
  text: |+
    import sqlite3
    from hstest import *
    import os


    class SQLite3Test:

        """It's recommended to keep the sequence:
        1. Create object SQLite3Check
        2. Check is file exists
        3. Establish connection
        4. Check is table exists
        5. Check are columns exists
        6. Do the rest of tests on tables: is column primary key, not null

        To do tests: is unique and is foreign key"""

        cursor_message = f"There is no cursor to connection."  # Is it proper message?
        no_table_message = f"There is no table you are looking for."

        def __init__(self, file_name):  # file_name -> string
            self.file_name = file_name
            self.conn = None
            self.cursor = None

        def is_file_exist(self):
            if not os.path.exists(self.file_name):
                return f"The file '{self.file_name}' does not exist or is outside of the script directory."
            return False

        def connect(self):
            ans = self.is_file_exist()
            if ans:
                return ans
            try:
                self.conn = sqlite3.connect(self.file_name)
                self.cursor = self.conn.cursor()
            except sqlite3.OperationalError:
                raise WrongAnswer(f"DataBase {self.file_name} may be locked.")

        def close(self):
            try:
                self.conn.close()
            except AttributeError:
                raise WrongAnswer(self.cursor_message)

        def run_query(self, query):
            try:
                lines = self.cursor.execute(f"{query}")
            except AttributeError:
                raise WrongAnswer(self.cursor_message)
            except sqlite3.OperationalError:
                self.close()
                raise WrongAnswer(self.no_table_message)
            return lines

        def is_table_exist(self, name):  # table name -> string
            lines = self.run_query(f"SELECT count(name) FROM sqlite_master WHERE type='table' AND name='{name}';").fetchall()
            if lines[0][0] == 0:
                self.close()
                raise WrongAnswer(f"There is no table named '{name}' in database {self.file_name}")

        def number_of_records(self, name, expected_lines):   # table name -> string, expected_lines -> integer
            lines = self.run_query(f"SELECT COUNT(*) FROM {name}").fetchone()[0]
            if lines != expected_lines:
                self.close()
                raise WrongAnswer(f"Wrong number of records in table {name}. Expected {expected_lines}, found {lines}")

        def is_column_exist(self, name, names):  # table name -> string, column names -> list of strings for all columns, or list with one string for one column
            lines = self.run_query(f'select * from {name}').description
            if len(names) != 1:
                if sorted(names) != sorted([line[0] for line in lines]):
                    self.close()
                    raise WrongAnswer(f"There is something wrong in table {name}. Found column names: {[line[0] for line in lines]}. Expected {names}'")
            else:
                if not any([names[0] == c_name for c_name in [line[0] for line in lines]]):
                    self.close()
                    raise WrongAnswer(f"There is something wrong in table {name}. Found column names: {[line[0] for line in lines]}. Expected to find '{names[0]}'")

        def table_info(self, name, column, attribute):   # table name -> string, column name -> string, attr ("PK" Primary Key; "NN" Not null)
            lines = self.run_query(f"PRAGMA table_info({name})").fetchall()
            if column not in [line[1] for line in lines]:
                raise WrongAnswer(f"There is no column {column}.")
            for line in lines:
                if attribute == "PK":
                    if line[1] == column and line[5] != 1:
                        self.close()
                        raise WrongAnswer(f"There is no PRIMARY KEY parameter in {name} on column {column}.")
                elif attribute == "NN":
                    if line[1] == column and line[3] != 1:
                        return CheckResult.wrong(f"There is no NOT NULL parameter in {name} on column {column}.")

        def is_unique(self, name, column):  # table name -> string, column name -> string
            lines = self.run_query(f"SELECT inf.name FROM pragma_index_list('{name}') as lst, pragma_index_info(lst.name) as inf WHERE lst.[unique] = 1;").fetchall()
            if not any([column in line for line in lines]):
                raise WrongAnswer(f"There is no UNIQUE parameter in {name} on column {column}.")
            return True

        def is_foreign_key(self, name, column):  # table name -> string, column name -> string
            lines = self.run_query(f"SELECT * FROM pragma_foreign_key_list('{name}');").fetchall()
            if not any([column in line for line in lines]):
                raise WrongAnswer(f"There is no FOREIGN KEY parameter in {name} on column {column}.")
            return True


    class FoodBlogStage1(StageTest):
        @dynamic_test
        def test(self):
            #  (table, (columns,), nr_of_records, (PK, ), ((NOT NULL, ), (not NOT NULL, )), ((FK, ), (not FK, )), ((UNIQUE, ), (not UNIQUE, )))
            test_data = ("food_blog.db",
                        (
                                ("measures", ("measure_id", "measure_name"), 8, ("measure_id", ), ((), ("measure_name", )), ((), ()), (("measure_name", ), ())),
                                ("ingredients", ("ingredient_id", "ingredient_name"), 6, ("ingredient_id", ), (("ingredient_name",), ()), ((), ()), (("ingredient_name", ), ())),
                                ("meals", ("meal_id", "meal_name"), 4, ("meal_id", ), (("meal_name",), ()), ((), ()), (("meal_name", ), ())),
                                ("recipes", ("recipe_id", "recipe_name", "recipe_description"), 0, ("recipe_id", ), (("recipe_name", ), ("recipe_description", )), ((), ()), ((), ("recipe_name", "recipe_description",))),
                                ("serve", ("serve_id", "recipe_id", "meal_id"), 0, ("serve_id", ), (("recipe_id", "meal_id"), ()), (("recipe_id", "meal_id"), ()), ((), ())),
                                ("quantity", ("quantity_id", "quantity", "recipe_id", "measure_id", "ingredient_id"), 0, ("quantity_id", ), (("quantity", "recipe_id", "measure_id", "ingredient_id"), ()), (("recipe_id", "measure_id", "ingredient_id"), ()), ((), ())),
                        ))

            dbase = SQLite3Test(test_data[0])

            if not dbase.is_file_exist():
                os.remove(test_data[0])

            pr = TestedProgram()
            pr.start(test_data[0])

            ans = dbase.is_file_exist()
            if ans:
                return CheckResult.wrong(f"The file '{dbase.file_name}' does not exist or is outside of the script directory.")

            dbase.connect()

            for table in test_data[1]:
                dbase.is_table_exist(table[0])

                dbase.is_column_exist(table[0], table[1])

                dbase.number_of_records(table[0], table[2])

                for column in table[3]:
                    dbase.table_info(table[0], column, "PK")

                for column in table[4][0]:
                    ans = dbase.table_info(table[0], column, "NN")
                    if ans:
                        return ans

                for column in table[4][1]:
                    if not dbase.table_info(table[0], column, "NN"):
                        dbase.close()
                        return CheckResult.wrong(f"Column {column} in table {table[0]} should not have Not Null attribute.")

                for column in table[5][0]:
                    dbase.is_foreign_key(table[0], column)

                for column in table[6][0]:
                    dbase.is_unique(table[0], column)

            #  (table, (columns,), nr_of_records, (PK, ), ((NOT NULL, ), (not NOT NULL, )), ((FK, ), (not FK, )), ((UNIQUE, ), (not UNIQUE, )))
            for item in ("Milkshake\nBlend all ingredients and put in the fridge.\n1 3 4\n500 ml milk\n1 cup strawberry\n1 tbsp sugar\n",
                            "\n",
                            "Hot cacao\nPour the ingredients into the hot milk. Mix it up.\n1 2\n250 ml milk\n2 tbsp cacao\n",
                            "\n",
                            "Hot cacao\nPour the ingredients into the hot milk. Mix it up.\n1 4\n250 ml milk\n2 tbsp cacao\n1 tsp sugar\n",
                            "\n",
                            "Fruit salad\nCut strawberries and mix with other fruits. you can sprinkle everything with sugar.\n3 4\n100 g strawberry\n50 g black\n1 cup blue\n1 tsp sugar\n",
                            "\n",
                            "\n"):
                pr.execute(item)

            dbase.number_of_records("recipes", 4)
            dbase.number_of_records("serve", 9)
            dbase.number_of_records("quantity", 12)

            if not pr.is_finished():
                return CheckResult.wrong("Your program unnecessarily waiting for input.")

            dbase.close()
            if not dbase.is_file_exist():
                os.remove(test_data[0])

            return CheckResult.correct()


    if __name__ == '__main__':
        FoodBlogStage1().run_tests()

  learner_created: false
feedback_link: https://hyperskill.org/projects/167/stages/867/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 09 Mar 2021 16:44:47 UTC
record: 3
